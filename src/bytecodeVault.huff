#define function attack(address) returns()

#define macro ATTACK() = takes (0) returns (0) {
  // store the function to call in memory

  // make call. return size is zero because we can fetch it after the call
  __FUNC_SIG("withdraw()") 0x00 mstore 

  push1 0x00         // [ret_size]
  push1 0x00         // [ret_offset, ret_size]
  push1 0x04         // [args_size, ret_offset, ret_size]
  push1 0x1c         // [args_offset, args_size, ret_offset, ret_size]
  push1 0x00         // [value, args_offset, args_size, ret_offset, ret_size]
  0x04 calldataload  // [getter_addr, value, args_offset, args_size, ret_offset, ret_size]
  gas                // [gas, getter_addr, value, args_offset, args_size, ret_offset, ret_size]
  call               // [successs]
  iszero             // [0/1]
  throw_error        // [throw_error, 0/1]
  jumpi              // []
}

#define macro MAIN() = takes(0) returns(0) {

    // Get the function selector
    push1 0x00
    calldataload
    0xE0
    shr

    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    __FUNC_SIG(attack) eq attack jumpi
    throw_error:
    push1 0x00 push1 0x00 revert
    attack:
        ATTACK()
}